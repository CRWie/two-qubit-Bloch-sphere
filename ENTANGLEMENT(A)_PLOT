#####@@@@@ PLOT ENTANGLEMENT SPHERE (HOPF BASE=QUBIT-A) @@@@@#####
fig = plt.figure(figsize=(5,5), dpi=200)
# fig = plt.figure(figsize=(4,4), dpi=200)
ax = fig.add_subplot(111, projection='3d')
ax.set_aspect('equal')

### hide axes
ax.set_axis_off()

#b_norm=radius of inner-sphere
x_b=b_norm*x
y_b=b_norm*y
z_b=b_norm*z

# Draw SPHERES   #ax.plot_surface(x, y, z, color='b')
ax.plot_surface(x, y, z,  rstride=2, cstride=2, color='y', linewidth=0, alpha=0.1) #outer t
if b_norm <=0.03 :    #t-vector is undefined OR b-sphere is too small
    ax.scatter([0], [0], [0], color="g", s=10)
else:
    ax.plot_surface(x_b, y_b, z_b,  rstride=2, cstride=2, color='g', linewidth=0, alpha=0.2) #inner bt

#axes ticks
ax.set_zticks([-1,-0.5,0,0.5,1])
ax.set_xticks([-1,0,1])
ax.set_yticks([-1,0,1])
#axes limits
axcenter=0; axlim=1.1
ax.set_xlim(axcenter-axlim, axcenter+axlim)
ax.set_ylim(axcenter-axlim, axcenter+axlim)
ax.set_zlim(axcenter-axlim, axcenter+axlim)

# draw concurrence circle on inner sphere
if b_norm != 0 and concurrence==0: #chi=0 or pi
    ax.scatter([0],[0],cz_coor, color="g", s=10)
else:
    cir = np.linspace(0, 2*np.pi, 100)
    x_line = concurrence*np.cos(cir)
    y_line = concurrence*np.sin(cir)
    ax.plot3D(x_line, y_line, cz_coor, 'g', linestyle = 'dashed',linewidth=1, alpha=0.7) #concurrence circle
    line_c=np.linspace(0,-concurrence,100)  #concurrence line on negative y-axis
    line_x=np.linspace(0,0,100)
    ax.plot3D(line_x, line_c, cz_coor, 'g', linewidth=1) #concurrence
    
#circle on outer sphere
if b_norm !=0:  #circle of radius 'sin(Chi)' on outer sphere
    x_line = t_radius*np.cos(cir)
    y_line = t_radius*np.sin(cir)
    ax.plot3D(x_line, y_line, tz_coor, 'm', linestyle = 'dashed', linewidth=0.7, alpha=0.5) #outer circle
    ##draw t-vector
    plt.quiver(0,0,0,new_t[0], new_t[1], new_t[2], length=1, 
               arrow_length_ratio=0.12, normalize=True, color='m', linewidth=0.7, alpha=0.7) #t-vector
    ##draw |b| line: quiver vector w. zero arrow head
    if np.absolute(new_t[0]) > np.absolute(new_t[1]):
        x_b=np.absolute(new_t[1]); y_b=np.absolute(new_t[0])
    else:
        x_b=np.absolute(new_t[0]); y_b=np.absolute(new_t[1])
    plt.quiver(0,0,0,b_norm*x_b, b_norm*y_b, 
               -b_norm*new_t[2], length=b_norm, arrow_length_ratio=0, normalize=True, 
               color='g', linewidth=0.7, alpha=1)  ##|b| radius

####horizontal circle to show 3D
# ax.plot(np.sin(u),np.cos(u),0,color='y', linestyle = 'dashed', linewidth=1, alpha=0.25) #hori back
# ax.plot(np.sin(horiz_front),np.cos(horiz_front),0,color='y', linewidth=1, alpha=0.35) #hori front

###vertical circle
# ax.plot(a[0] * np.sin(u) + b[0] * np.cos(u), b[1] * np.cos(u), a[2] * np.sin(u) + b[2] * np.cos(u),
#         color='y', linestyle = 'dashed', linewidth=1, alpha=0.25)
# ax.plot(a[0] * np.sin(vert_front) + b[0] * np.cos(vert_front), b[1] * np.cos(vert_front), a[2] * np.sin(vert_front) + b[2] * np.cos(vert_front),
#         color='y', linewidth=1, alpha=0.35)

#draw axes
ax.plot3D(line1, line0, line0, 'k', linewidth=1) #x-axis
ax.plot3D(line0, line1, line0, 'k', linewidth=1) #y-axis
ax.plot3D(line0, line0, line1, 'k', linewidth=1) #z-axis

#negative axes in gray
ax.plot3D(line_1, line0, line0, 'gray', linewidth=1) #x-axis
ax.plot3D(line0, line_1, line0, 'gray', linewidth=1) #y-axis
ax.plot3D(line0, line0, line_1, 'gray', linewidth=1) #z-axis

#### axes labels and other labels
# axis_font={'fontname':'Times New Roman', 'size':'11', 'weight':'normal'}
axis_font={'fontname':'Times New Roman', 'size':'11', 'weight':'ultralight'}
label_font={'fontname':'Times New Roman', 'size':'11', 'weight':'normal',
           'verticalalignment':'bottom'}
c_font={'fontname':'Times New Roman', 'size':'12', 'weight':'bold',
           'verticalalignment':'bottom'}
title_font={'fontname':'Times New Roman', 'size':'12', 'weight':'bold'}
# ax.text(1,0,-0.14, "i(x)", **axis_font)  #"$x_1$(x)"
# ax.text(0,.85,-0.15, "j(y)", **axis_font)
# ax.text(0,0.05,.91, "k(z)", **axis_font)
ax.text(1,0,-0.14, "$x_2$(i)", **axis_font)  
ax.text(0,.85,-0.15, "$x_3$(j)", **axis_font)
ax.text(0,0.05,.91, "$x_4$(k)", **axis_font)
if b_norm !=0:
    ax.text(0.5*new_t[0],0.5*new_t[1]-0.01,0.5*new_t[2]-0.12, "t", color='magenta') #t
    ax.text(0, -0.5*concurrence-0.01, cz_coor-0.02, "c", color='green', **c_font) #c
    ax.text(0.5*b_norm*x_b,0.5*b_norm*y_b, -0.5*b_norm*new_t[2],"|b|", 
            color='green', **label_font) #|b|
    chi_label=round(mp.degrees(chi)); new_xi_label=round(mp.degrees(new_xi))
    t_text='('+str(chi_label)+','+str(new_xi_label)+')'
    if chi_label == 0 or chi_label == 180:
        t_text='('+str(chi_label)+','+"arb"+')'
    ax.text(new_t[0], new_t[1]-0.1, new_t[2], t_text, color='magenta', **label_font) #(chi,xi)
#     t_coor_text='($\chi,\\xi-2\\zeta_f$) = '+t_text  #new xi label
    t_coor_text='($\chi,\\xi$) = '+t_text  #old xi label
    ax.text(1, -0.05, -1, t_coor_text, color='magenta', **label_font)
    c_text='Concurrence: c=|b|sin$\chi$='+str(round(concurrence, 2))
    ax.text(1, -0.45, -1.2, c_text, color='green', **label_font) #c=|b|sinChi
    ax.text(0.5, -0.65, 1.12, "ENTANGLEMENT(A)", color="black", **title_font)
    
#display in nice view
ax.view_init(elev = elev, azim = 30)
plt.show()
