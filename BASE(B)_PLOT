#####@@@@@ PLOT BASE SPHERE (QUBIT-B)  @@@@@#####
fig = plt.figure(figsize=(5,5), dpi=200)
ax = fig.add_subplot(111, projection='3d')
ax.set_aspect('equal')
ax.set_axis_off()

# Make data
u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)
x = 1 * np.outer(np.cos(u), np.sin(v))
y = 1 * np.outer(np.sin(u), np.sin(v))
z = 1 * np.outer(np.ones(np.size(u)), np.cos(v))

#Qubit-B quasi-Bloch sphere 
ax.plot_surface(x, y, z,  rstride=2, cstride=2, color='y', linewidth=0, alpha=0.1) 
#Qubit-B quasi-StateVector
plt.quiver(0,0,0,x1_coor,b_coor,x0_coor, length=1, arrow_length_ratio=0.15, normalize=True, color='m', linewidth=0.7) #, alpha=0.5)
#axes ticks
ax.set_zticks([-1,-0.5,0,0.5,1])
ax.set_xticks([-1,0,1])
ax.set_yticks([-1,0,1])
#axes limits
axcenter=0
axlim=1.1
ax.set_xlim(axcenter-axlim, axcenter+axlim)
ax.set_ylim(axcenter-axlim, axcenter+axlim)
ax.set_zlim(axcenter-axlim, axcenter+axlim)

##horizontal circle for 3D
horiz_front = np.linspace(0, np.pi, 100)
ax.plot(np.sin(u),np.cos(u),0,color='y', linestyle = 'dashed', linewidth=1, alpha=0.25) #hori back
ax.plot(np.sin(horiz_front),np.cos(horiz_front),0,color='y', linewidth=1, alpha=0.5) #hori front
##vertical circle for 3D
#calculate vectors and plot "vertical" circle to show 3D
elev = 10.0
rot = 90.0 / 180 * np.pi
a = np.array([-np.sin(elev / 180 * np.pi), 0, np.cos(elev / 180 * np.pi)])
b = np.array([0, 1, 0])
b = b * np.cos(rot) + np.cross(a, b) * np.sin(rot) + a * np.dot(a, b) * (1 - np.cos(rot))
vert_front = np.linspace(np.pi / 2, 3 * np.pi / 2, 100)
ax.plot(a[0] * np.sin(u) + b[0] * np.cos(u), b[1] * np.cos(u), a[2] * np.sin(u) + b[2] * np.cos(u),color='y', linestyle = 'dashed', linewidth=1, alpha=0.25)
ax.plot(a[0] * np.sin(vert_front) + b[0] * np.cos(vert_front), b[1] * np.cos(vert_front), a[2] * np.sin(vert_front) + b[2] * np.cos(vert_front),color='y', linewidth=1, alpha=0.5)

#draw axes
line0=np.linspace(0, 0, 100)
line1=np.linspace(0, 1., 100)
line_1=np.linspace(0, -1., 100)
ax.plot3D(line1, line0, line0, 'k', linewidth=1) #x-axis
ax.plot3D(line0, line1, line0, 'k', linewidth=1) #y-axis
ax.plot3D(line0, line0, line1, 'k', linewidth=1) #z-axis

#axes labels and other labels
title_font={'fontname':'Times New Roman', 'size':'12', 'weight':'bold'}
axis_font={'fontname':'Times New Roman', 'size':'11', 'weight':'ultralight'}
label_font={'fontname':'Times New Roman', 'size':'11', 'weight':'normal',
           'verticalalignment':'bottom'}
b_font={'fontname':'Times New Roman', 'size':'10', 'weight':'ultralight'}
title_font={'fontname':'Times New Roman', 'size':'12', 'weight':'bold'}
# ax.text(1,0,-0.14, "$x_1$(x)", **axis_font)
# ax.text(0,.85,-0.15, "b(y)", **axis_font)
# ax.text(0,0.05,.91, "$x_0$(z)", **axis_font)
ax.text(1,0,-0.14, "$x_1$", **axis_font)
ax.text(0,.85,-0.15, "b", **axis_font)
ax.text(0,0.05,.91, "$x_0$", **axis_font)
thetaB_label=round(mp.degrees(thetaB)); phiB_label=round(mp.degrees(phiB))
angle_label='('+str(thetaB_label)+','+str(phiB_label)+')'
ax.text(x1_coor, b_coor-0.25, x0_coor+0.01, angle_label, color='magenta', **label_font)
angle_text='($\\theta,\phi$)='+angle_label
ax.text(1, 0.0, -1, angle_text, color='magenta', **label_font)
b_text='b=sin$\\theta$sin$\phi$='+str(round(b_coor, 2))
ax.text(1, 0, -1.18, b_text, color='magenta', **label_font)
ax.text(-1, -1, 1, "BASE(B)", color="black", **title_font)

#display in nice view
ax.view_init(elev = elev, azim = 30)

plt.show()
